from langsmith import traceable
from langgraph.graph.state import CompiledStateGraph

from src.agents.graph import create_research_graph
from src.agents.utils.email_service import MailingService
from src.agents.utils.output_utils import (
    convert_markdown_to_pdf,
    move_file_to_storage,
    store_response_with_timestamp,
)
from src.configuration.kpis import SalesReportRequest
from src.configuration.logger import default_logger
from src.configuration.recipients import get_recipient_emails
from src.configuration.db import default_config_db_sessionmaker
from src.configuration.settings import app_settings


@traceable
async def main():
    """
    Main function to run the database agent.
    This is a simple example of how to use the database agent.
    """

    research_graph: CompiledStateGraph = await create_research_graph()

    test_request = SalesReportRequest(
        grouping="country",
        grouping_value="Spain",
        period="monthly",
    )

    test_result = await research_graph.ainvoke({"request": test_request})

    print("Test Result:", test_result["report"])

    default_logger.info(f"Completed research task for KPI: {test_request.name}")
    md_file_path = store_response_with_timestamp(
        response=test_result["report"], file_name=f"{test_request.name}"
    )

    # Convert the Markdown report to PDF and move it to storage
    pdf_path = convert_markdown_to_pdf(md_file_path)
    pdf_path = move_file_to_storage(pdf_path)

    # Send email notification with the report
    email_list = get_recipient_emails(default_config_db_sessionmaker)
    mailing = MailingService(env=app_settings)
    mailing.send_email(
        recipients=email_list,
        subject="AI Analyst Agent Run",
        body="Here is your report generated by the AI Analyst agent.",
        attachments=[pdf_path],
    )

    default_logger.info(
        f"AI Analyst agent ran successfully. Report saved at {pdf_path}."
    )


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
