from langgraph.prebuilt import create_react_agent
from langgraph.graph.state import CompiledStateGraph
from pydantic import BaseModel, Field

from src.agents.models import AppChatModels
from src.agents.tools.python_interpreter import create_python_repl_tool
from src.agents.utils.prompt_utils import PrompTypes, render_prompt_template
from src.configuration.settings import TEMP_DIR


class QuantitativeAgentResponse(BaseModel):
    """
    Response model for the quantitative agent.
    Contains the content of the response and the code used to generate it.

    It is important to extract the code from the Tool Calls to `python_repl`,
    not to depend on the content of the response.
    """

    content: str = Field(
        description="The content of the response to the request from the user, as generated by the agent in the last message.",
    )
    code: str = Field(
        description="The code used to answer the request, this **must** be extracted from Tool Calls to `python_repl`. If you can't find any, set as ''.",
    )


def get_quantitative_agent(models: AppChatModels) -> CompiledStateGraph:
    """
    Very basic agent that can interact with a code interpreter.

    Args:
        models (AppChatModels): The models to use for the agent.

    Returns:
        CompiledStateGraph: The compiled state graph for the agent.
    """
    system_message = render_prompt_template(
        "quantitative_analyst_agent_system_prompt.md",
        context={
            "temp_path": str(TEMP_DIR),
        },
        type=PrompTypes.SYSTEM,
    )

    return create_react_agent(
        model=models.gpt_o4_mini,
        tools=[create_python_repl_tool()],
        prompt=system_message,
        response_format=QuantitativeAgentResponse,
    )
